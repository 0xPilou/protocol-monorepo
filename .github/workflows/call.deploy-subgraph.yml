name: Reusable Workflow | Deploy Subgraph

on:
  workflow_call:
    inputs:
      vendor:
        required: true
        description: "Where to deploy subgraph to; superfluid, graph, or satsuma"
        type: string
      release_branch:
        required: false
        type: string
        description: 'The subgraph release: feature, dev, v1'
      network:
        required: true
        type: string
        description: 'The network you want to deploy to (matic, xdai, eth-mainnet, etc.) or `all` for all networks.'

    secrets:
      SUBGRAPH_URL_TEMPLATE:
        description: 'Subgraph endpoint url template'
        required: false
      SATSUMA_DEPLOY_KEY:
        description: 'Satsuma deploy key'
        required: false
      THE_GRAPH_ACCESS_TOKEN:
        description: 'The Graph (hosted service) access token for deploying subgraphs'
        required: false
      SUPERFLUID_IPFS_API:
        description: 'Superfluid IPFS API endpoint'
        required: false

jobs:
  show-contexts:
    name: Show Contexts

    runs-on: ubuntu-latest

    steps:
      - name: Show contexts
        env:
          HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.sha: ${{ github.sha }}
          echo github.repository: ${{ github.repository }}
          echo github.ref: "$GITHUB_REF"
          echo github.head_ref: "$HEAD_REF"
          echo github.base_ref: ${{ github.base_ref }}

  deploy-subgraph:
    name: Build and Deploy Subgraph

    runs-on: ubuntu-latest
    env:
      subgraph-working-directory: ./packages/subgraph

    defaults:
      run:
        shell: nix develop -c bash {0}

    steps:
      - uses: actions/checkout@v3

      - uses: cachix/install-nix-action@v19
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Install dependencies"
        run: yarn install --frozen-lockfile

      - name: "Build contracts"
        run: yarn build
        working-directory: ./packages/ethereum-contracts

      - name: "Get ABI"
        run: node scripts/getAbi.js
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Prepare subgraph manifest"
        # This step is required for generating a preliminary subgraph.yaml
        # and addresses.ts file for the yarn codegen step below
        # using a mock.json networks file.
        run: ./tasks/prepare-manifest.sh mock
        working-directory: ${{ env.subgraph-working-directory }}

      - name: "Generate meta.ignore.ts file"
        # Collects metadata like the git branch and commit hash
        run: "yarn generate-sf-meta"
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          COMMIT_HASH: ${{ github.sha }}
          CONFIGURATION: ${{ inputs.release_branch }}

      - name: "Generate AssemblyScript types"
        run: "yarn codegen"
        working-directory: ${{ env.subgraph-working-directory }}

      # - name: Ensure release_branch property is passed
      #   run: |
      #     if [ "${{ inputs.release_branch }}" == "" ];then
      #       echo "You must pass in the release_branch at a minimum."
      #       exit 1
      #     fi

      # If tagged, get subgraph tag name that starts with subgraph@. Outputs $GIT_TAG_NAME
      - uses: olegtarasov/get-tag@v2.1.2
        id: "getSubgraphTag"
        with:
          tagRegex: "subgraph@(.*)" 

      # Now depending on the vendor, deploy using the appropriate script.

      - name: "Deploy to Superfluid self-hosted node"
        if: inputs.vendor == 'superfluid'
        run: ./tasks/deploy-self-hosted-network.sh -n ${{ inputs.network }} -v ${{ inputs.release_branch }}
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          SUBGRAPH_URL_TEMPLATE: ${{ secrets.SUBGRAPH_URL_TEMPLATE }}
          SUPERFLUID_IPFS_API: ${{ secrets.SUPERFLUID_IPFS_API }}

      - name: "Deploy to The Graph (hosted service)"
        if: inputs.vendor == 'graph'
        run: ./tasks/deploy-graph-networks.sh -n ${{ inputs.network }} -v ${{ inputs.release_branch }}
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          THE_GRAPH_ACCESS_TOKEN: ${{ secrets.THE_GRAPH_ACCESS_TOKEN }}

      # Version is the git tag or revision
      - name: "Deploy to Satsuma"
        if: inputs.vendor == 'satsuma'
        run: |
          shortRev=$(git rev-parse --short ${{ github.sha }})
          versionLabel="${GIT_TAG_NAME:-$shortRev}"
          ./tasks/deploy-satsuma-networks.sh -n ${{ inputs.network }} -v $versionLabel
        working-directory: ${{ env.subgraph-working-directory }}
        env:
          SATSUMA_DEPLOY_KEY: ${{ secrets.SATSUMA_DEPLOY_KEY }}
